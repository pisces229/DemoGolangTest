// Code generated by MockGen. DO NOT EDIT.
// Source: demo.golang.test/run (interfaces: SecondRunner)

// Package mock_run is a generated GoMock package.
package mock_run

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSecondRunner is a mock of SecondRunner interface.
type MockSecondRunner struct {
	ctrl     *gomock.Controller
	recorder *MockSecondRunnerMockRecorder
}

// MockSecondRunnerMockRecorder is the mock recorder for MockSecondRunner.
type MockSecondRunnerMockRecorder struct {
	mock *MockSecondRunner
}

// NewMockSecondRunner creates a new mock instance.
func NewMockSecondRunner(ctrl *gomock.Controller) *MockSecondRunner {
	mock := &MockSecondRunner{ctrl: ctrl}
	mock.recorder = &MockSecondRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecondRunner) EXPECT() *MockSecondRunnerMockRecorder {
	return m.recorder
}

// GetName mocks base method.
func (m *MockSecondRunner) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockSecondRunnerMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockSecondRunner)(nil).GetName))
}

// SecondSpeedUp mocks base method.
func (m *MockSecondRunner) SecondSpeedUp(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecondSpeedUp", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// SecondSpeedUp indicates an expected call of SecondSpeedUp.
func (mr *MockSecondRunnerMockRecorder) SecondSpeedUp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecondSpeedUp", reflect.TypeOf((*MockSecondRunner)(nil).SecondSpeedUp), arg0)
}
