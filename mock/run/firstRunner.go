// Code generated by MockGen. DO NOT EDIT.
// Source: demo.golang.test/run (interfaces: FirstRunner)

// Package mock_run is a generated GoMock package.
package mock_run

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFirstRunner is a mock of FirstRunner interface.
type MockFirstRunner struct {
	ctrl     *gomock.Controller
	recorder *MockFirstRunnerMockRecorder
}

// MockFirstRunnerMockRecorder is the mock recorder for MockFirstRunner.
type MockFirstRunnerMockRecorder struct {
	mock *MockFirstRunner
}

// NewMockFirstRunner creates a new mock instance.
func NewMockFirstRunner(ctrl *gomock.Controller) *MockFirstRunner {
	mock := &MockFirstRunner{ctrl: ctrl}
	mock.recorder = &MockFirstRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirstRunner) EXPECT() *MockFirstRunnerMockRecorder {
	return m.recorder
}

// FirstSpeedUp mocks base method.
func (m *MockFirstRunner) FirstSpeedUp(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirstSpeedUp", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// FirstSpeedUp indicates an expected call of FirstSpeedUp.
func (mr *MockFirstRunnerMockRecorder) FirstSpeedUp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirstSpeedUp", reflect.TypeOf((*MockFirstRunner)(nil).FirstSpeedUp), arg0)
}

// GetName mocks base method.
func (m *MockFirstRunner) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockFirstRunnerMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockFirstRunner)(nil).GetName))
}
