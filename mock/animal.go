// Code generated by MockGen. DO NOT EDIT.
// Source: demo.golang.test/home (interfaces: Animal)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAnimal is a mock of Animal interface.
type MockAnimal struct {
	ctrl     *gomock.Controller
	recorder *MockAnimalMockRecorder
}

// MockAnimalMockRecorder is the mock recorder for MockAnimal.
type MockAnimalMockRecorder struct {
	mock *MockAnimal
}

// NewMockAnimal creates a new mock instance.
func NewMockAnimal(ctrl *gomock.Controller) *MockAnimal {
	mock := &MockAnimal{ctrl: ctrl}
	mock.recorder = &MockAnimalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnimal) EXPECT() *MockAnimalMockRecorder {
	return m.recorder
}

// Get_Name mocks base method.
func (m *MockAnimal) Get_Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get_Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Get_Name indicates an expected call of Get_Name.
func (mr *MockAnimalMockRecorder) Get_Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get_Name", reflect.TypeOf((*MockAnimal)(nil).Get_Name))
}

// Get_Speed mocks base method.
func (m *MockAnimal) Get_Speed(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get_Speed", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// Get_Speed indicates an expected call of Get_Speed.
func (mr *MockAnimalMockRecorder) Get_Speed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get_Speed", reflect.TypeOf((*MockAnimal)(nil).Get_Speed), arg0)
}
